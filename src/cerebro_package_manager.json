[{"id":"cerebro_package_manager","user_id":"5c81c4d9-7456-4fa6-b2cd-860cd3b13d61","name":"Cerebro Package Manager","type":"filter","content":"\"\"\"\ntitle: Cerebro Package Manager\nauthor: Andrew Tait Gehrhardt\nauthor_url: https://github.com/atgehrhardt/Cerebro-OpenWebUI-Package-Manager\nfunding_url: https://github.com/open-webui\nversion: 0.1.3\n\"\"\"\n\nfrom typing import List, Union, Generator, Iterator, Optional\nfrom pydantic import BaseModel\nimport requests\nimport os\nimport json\nimport aiohttp\nimport uuid\nimport re\nimport zipfile\nimport io\nimport shutil\nfrom utils.misc import get_last_user_message\nfrom apps.webui.models.files import Files\n\nfrom config import UPLOAD_DIR\n\n\nclass Filter:\n    SUPPORTED_COMMANDS = [\"run\", \"install\", \"uninstall\", \"list\"]\n\n    class Valves(BaseModel):\n        open_webui_host: str = os.getenv(\n            \"OPEN_WEBUI_HOST\",\n            \"https://192.168.1.154\",  # If using Nginx this MUST be your server ip address https://192.168.1.xxx\n        )\n        openai_base_url: str = os.getenv(\n            \"OPENAI_BASE_URL\", \"http://host.docker.internal:11434/v1\"\n        )\n        package_repo_url: str = os.getenv(\n            \"CEREBRO_PACKAGE_REPO_URL\",\n            \"https://github.com/atgehrhardt/Cerebro-OpenWebUI-Package-Manager\",\n        )\n\n    def __init__(self):\n        self.file_handler = True\n        self.valves = self.Valves()\n        self.last_created_file = None\n        self.selected_model = None\n        self.user_id = None\n        self.file = None\n        self.package_files = {}\n        self.pkg_launch = False\n        self.installed_pkgs = []\n        self.packages = []\n\n    def create_file(\n        self,\n        package_name,\n        file_name: str,\n        title: str,\n        content: str,\n        user_id: Optional[str] = None,\n    ):\n        user_id = user_id or self.user_id\n\n        if not user_id:\n            raise ValueError(\"User ID is required to create a file.\")\n\n        base_path = os.path.join(UPLOAD_DIR, \"cerebro\", \"plugins\", package_name)\n        os.makedirs(base_path, exist_ok=True)\n\n        file_id = str(uuid.uuid4())\n        file_path = os.path.join(base_path, file_name)\n\n        try:\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                print(f\"Writing file to {file_path}...\")\n                f.write(content)\n        except IOError as e:\n            raise IOError(f\"Error writing file to {file_path}: {str(e)}\")\n\n        try:\n            meta = {\n                \"source\": file_path,\n                \"title\": title,\n                \"content_type\": \"text/html\",\n                \"size\": os.path.getsize(file_path),\n                \"path\": file_path,\n            }\n        except FileNotFoundError as e:\n            raise FileNotFoundError(f\"File {file_path} not found: {str(e)}\")\n\n        class FileForm(BaseModel):\n            id: str\n            filename: str\n            meta: dict = {}\n\n        form_data = FileForm(id=file_id, filename=file_name, meta=meta)\n\n        try:\n            self.file = Files.insert_new_file(user_id, form_data)\n            self.last_created_file = self.file\n            return self.file\n        except Exception as e:\n            os.remove(file_path)\n            raise Exception(f\"Error inserting file into database: {str(e)}\")\n\n    def get_file_url(self, file_id: str) -> str:\n        return f\"{self.valves.open_webui_host}/api/v1/files/{file_id}/content\"\n\n    def handle_package(self, package_name, url: str, file_name: str):\n        files = Files.get_files()\n        files = [file for file in files if file.user_id == self.user_id]\n        files = [file for file in files if file_name in file.filename]\n        print(\"Files: \", files)\n\n        if files:\n            self.file = files[0].id\n            print(f\"\\n{self.file}\\n\")\n            print(\"File already exists\")\n        else:\n            if not url:\n                print(\"No URL provided, cannot download the file.\")\n                return\n\n            try:\n                print(f\"Downloading the file from {url}...\\n\")\n                response = requests.get(url)\n                response.raise_for_status()\n                file_content = response.text\n                print(\"Downloaded file content:\")\n                print(file_content)\n            except Exception as e:\n                raise Exception(f\"Error downloading {file_name}: {str(e)}\")\n\n            try:\n                if not self.user_id:\n                    raise ValueError(\"User ID is not set. Cannot create file.\")\n                created_file = self.create_file(\n                    package_name, file_name, file_name, file_content, self.user_id\n                )\n                self.file = (\n                    created_file.id if hasattr(created_file, \"id\") else created_file\n                )\n            except Exception as e:\n                print(f\"Error creating file: {str(e)}\")\n                raise Exception(f\"Error creating file: {str(e)}\")\n\n        return self.file\n\n    def is_package_installed(self, package_name: str) -> bool:\n        package_dir = os.path.join(UPLOAD_DIR, \"cerebro\", \"plugins\", package_name)\n        return os.path.exists(package_dir)\n\n    def install_package(self, package_name: str):\n        zip_url = f\"{self.valves.package_repo_url}/archive/main.zip\"\n\n        if self.is_package_installed(package_name):\n            print(f\"Package {package_name} is already installed.\")\n            self.pkg_launch = \"Already Installed\"\n            return\n\n        try:\n            # Download the zip file\n            response = requests.get(zip_url)\n            response.raise_for_status()\n\n            # Get the repo name from the url\n            repo_name = self.valves.package_repo_url.split(\"/\")[-1]\n\n            # Extract the specific package directory\n            with zipfile.ZipFile(io.BytesIO(response.content)) as zip_ref:\n                package_dir = f\"{repo_name}-main/plugins/{package_name}\"\n                print(f\"Extracting package directory: {package_dir}...\")\n                for file in zip_ref.namelist():\n                    if file.startswith(package_dir) and file != package_dir + \"/\":\n                        # Extract the package files\n                        print(f\"Extracting {file}...\")\n                        zip_ref.extract(file, UPLOAD_DIR)\n\n            # Get the source directory\n            src_dir = os.path.join(UPLOAD_DIR, package_dir)\n            dst_dir = os.path.join(UPLOAD_DIR, \"cerebro\", \"plugins\", package_name)\n\n            # Check if the source directory exists\n            if not os.path.exists(src_dir):\n                raise FileNotFoundError(f\"Source directory not found: {src_dir}\")\n\n            # Create the destination directory if it doesn't exist\n            os.makedirs(os.path.dirname(dst_dir), exist_ok=True)\n\n            # Move the package directory to the plugins directory\n            shutil.move(src_dir, dst_dir)\n\n            # Remove the extracted directory\n            shutil.rmtree(os.path.join(UPLOAD_DIR, f\"{repo_name}-main\"))\n\n            # Loop through all the files in the package directory and create them in the database\n            for root, dirs, files in os.walk(dst_dir):\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    print(f\"Creating file: {file_path}\")\n\n                    # Get the content of each file\n                    try:\n                        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                            file_content = f.read()\n\n                        filename = os.path.basename(file_path)\n                        # Create file in the database\n                        created_file = self.create_file(\n                            package_name,\n                            f\"{file_path}\",\n                            f\"{file_path}\",\n                            file_content,\n                            self.user_id,\n                        )\n\n                        self.package_files[filename] = (\n                            created_file.id\n                            if hasattr(created_file, \"id\")\n                            else created_file\n                        )\n                    except Exception as e:\n                        print(f\"Error creating file: {str(e)}\")\n                        raise Exception(f\"Error creating file: {str(e)}\")\n\n            # Update the contents of _capp.html file\n            capp_file = os.path.join(dst_dir, f\"{package_name}_capp.html\")\n            with open(capp_file, \"r\", encoding=\"utf-8\") as f:\n                capp_content = f.read()\n                for filename, file_id in self.package_files.items():\n                    # Replace the filename with the file content url\n                    capp_content = capp_content.replace(\n                        \"{\" + filename + \"}\", self.get_file_url(file_id)\n                    )\n                # Update the content of the _capp.html file\n                with open(capp_file, \"w\", encoding=\"utf-8\") as f:\n                    f.write(capp_content)\n\n            print(f\"Package {package_name} installed successfully.\")\n            self.pkg_launch = \"Installed\"\n\n        except Exception as e:\n            print(f\"Error installing package {package_name}: {str(e)}\")\n            raise Exception(f\"Error installing package {package_name}: {str(e)}\")\n\n    def uninstall_package(self, package_name: str):\n        package_dir = os.path.join(UPLOAD_DIR, \"cerebro\", \"plugins\", package_name)\n        if not os.path.exists(package_dir):\n            print(f\"Package {package_name} does not exist.\")\n            return\n\n        try:\n            for root, dirs, files in os.walk(package_dir, topdown=False):\n                for file in files:\n                    os.remove(os.path.join(root, file))\n                for dir in dirs:\n                    os.rmdir(os.path.join(root, dir))\n            os.rmdir(package_dir)\n\n            # Remove the file from the database\n            files = Files.get_files()\n            files = [file for file in files if file.user_id == self.user_id]\n            files = [\n                file for file in files if f\"{package_name}_capp.html\" in file.filename\n            ]\n            if files:\n                Files.delete_file_by_id(files[0].id)\n\n            print(f\"Package {package_name} uninstalled successfully.\")\n            self.pkg_launch = \"Uninstalled\"\n        except Exception as e:\n            raise Exception(f\"Error deleting package {package_name}: {str(e)}\")\n\n    def list_packages(self, body: dict) -> List[str]:\n        if not self.user_id:\n            print(\"User ID is not set. Cannot list packages.\")\n            return []\n\n        plugins_dir = os.path.join(UPLOAD_DIR, \"cerebro\", \"plugins\")\n        if not os.path.exists(plugins_dir):\n            print(\"Plugins directory does not exist.\")\n            return []\n\n        self.packages = [\n            d\n            for d in os.listdir(plugins_dir)\n            if os.path.isdir(os.path.join(plugins_dir, d))\n        ]\n        print(f\"\\n\\n\\nPackages list: {self.packages}\\n\\n\\n\")\n\n        self.pkg_launch = \"list\"\n        self.installed_pkgs = self.packages\n        return self.packages\n\n    def check_package_exists(self, package_name: str) -> bool:\n        package_dir = os.path.join(\n            UPLOAD_DIR, \"cerebro\", \"plugins\", package_name.replace(\"_capp.html\", \"\")\n        )\n        return os.path.exists(package_dir)\n\n    def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        print(f\"inlet:{__name__}\")\n        print(f\"inlet:body:{body}\")\n        print(f\"inlet:user:{__user__}\")\n\n        if __user__ and \"id\" in __user__:\n            self.user_id = __user__[\"id\"]\n        else:\n            print(\"Warning: No valid user ID provided\")\n\n        messages = body.get(\"messages\", [])\n        if messages:\n            last_message = messages[-1][\"content\"]\n            print(f\"Last message: {last_message}\")\n\n            if last_message.startswith(\"owui \"):\n                command_parts = last_message.split()\n                if len(command_parts) >= 2:\n                    command = command_parts[1]\n                    if command not in self.SUPPORTED_COMMANDS:\n                        self.pkg_launch = \"invalid\"\n                        return body\n\n                if last_message.startswith(\"owui run\"):\n                    command_parts = last_message.split()\n                    print(f\"Command parts: {command_parts}\")\n                    if len(command_parts) >= 3:\n                        _, _, package_name = command_parts[:3]\n                        url = (\n                            \" \".join(command_parts[3:])\n                            if len(command_parts) > 3\n                            else None\n                        )\n                        file_name = f\"{package_name}_capp.html\"\n                        print(\n                            f\"Running command with file name: {file_name} and URL: {url}\"\n                        )\n\n                        if not self.check_package_exists(file_name):\n                            self.pkg_launch = \"none\"\n                            return body\n\n                        self.handle_package(package_name, url, file_name)\n                        self.pkg_launch = True\n                        return body\n\n                elif last_message.startswith(\"owui install\"):\n                    command_parts = last_message.split()\n                    print(f\"Command parts: {command_parts}\")\n                    if len(command_parts) >= 3:\n                        package_name = command_parts[2]\n                        print(f\"Installing package: {package_name}\")\n                        self.install_package(package_name)\n                        return body\n\n                elif last_message.startswith(\"owui uninstall\"):\n                    command_parts = last_message.split()\n                    print(f\"Command parts: {command_parts}\")\n                    if len(command_parts) >= 3:\n                        package_name = \" \".join(command_parts[2:])\n                        print(f\"Uninstalling package: {package_name}\")\n                        self.uninstall_package(package_name)\n                        return body\n\n                elif last_message.startswith(\"owui list\"):\n                    self.list_packages(body)\n                    print(f\"\\n\\n\\nReturning body: {body}\\n\\n\\n\")\n                    return body\n        return body\n\n    def outlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        print(f\"outlet:{__name__}\")\n        print(f\"outlet:body:{body}\")\n        print(f\"outlet:user:{__user__}\")\n\n        if self.pkg_launch is True:\n            if self.file:\n                body[\"messages\"][-1][\"content\"] = f\"{{{{HTML_FILE_ID_{self.file}}}}}\"\n            else:\n                print(\"Error: File ID not set after handling package\")\n                body[\"messages\"][-1][\"content\"] = \"Error: Unable to load package\"\n        elif self.pkg_launch == \"Installed\":\n            body[\"messages\"][-1][\"content\"] = \"Package Installed\"\n        elif self.pkg_launch == \"Already Installed\":\n            body[\"messages\"][-1][\"content\"] = \"Package Already Installed\"\n        elif self.pkg_launch == \"Uninstalled\":\n            body[\"messages\"][-1][\"content\"] = \"Package Uninstalled\"\n        elif self.pkg_launch == \"list\":\n            body[\"messages\"][-1][\"content\"] = (\n                \"--- INSTALLED PACKAGES--- \\n\" + \"\\n\".join(self.installed_pkgs)\n            )\n        elif self.pkg_launch == \"none\":\n            body[\"messages\"][-1][\"content\"] = \"Package Not installed\"\n        elif self.pkg_launch == \"invalid\":\n            body[\"messages\"][-1][\n                \"content\"\n            ] = f\"Invalid command. Supported commands are: {', '.join(self.SUPPORTED_COMMANDS)}\"\n        else:\n            pass\n\n        self.pkg_launch = False\n\n        return body\n","meta":{"description":"Cerebro Package Manager","manifest":{"title":"Cerebro Package Manager","author":"Andrew Tait Gehrhardt","author_url":"https://github.com/atgehrhardt/Cerebro-OpenWebUI-Package-Manager","funding_url":"https://github.com/open-webui","version":"0.1.3"}},"is_active":true,"updated_at":1719468386,"created_at":1719468257}]